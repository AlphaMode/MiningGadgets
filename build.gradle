import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.+'
    id 'org.quiltmc.quilt-mappings-on-loom' version '4.+'
    id 'eclipse'
    id 'maven-publish'
}

version = "${mod_version}"
group = 'com.direwolf20.mininggadgets' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mininggadgets'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // REI
    maven {
        url = "https://maven.shedaniel.me/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org/"
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc_version}"

    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    //REI
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modRuntimeOnly ("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(include("com.electronwill.night-config:core:3.6.3"))
    implementation(include("com.electronwill.night-config:toml:3.6.3"))
    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_version}"))

    modImplementation(include("me.alphamode:ForgeTags:2.1"))
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.mc_version}.${project.port_lib_hash}"))

    include modApi('teamreborn:energy:2.2.0') {
        exclude(group: "net.fabricmc.fabric-api")
    }

//    runtimeOnly fg.deobf("curse.maven:inventory-tweaks-renewed:3102237")
//    runtimeOnly fg.deobf("curse.maven:lollipop-347954:3232534")
//    runtimeOnly fg.deobf("curse.maven:powah-352656:352656")
//    runtimeOnly fg.deobf("curse.maven:mekanism-268560:268560")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INHERIT

    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "mcversion": project.mc_version,
                "forgeversion": project.forge_version,
                "forgeshortversion": project.forge_version.split('\\.')[0]
    }

	doLast {
	    def jsonMinifyStart = System.currentTimeMillis()
	    def jsonMinified = 0
		def jsonBytesSaved = 0

	    fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

			File file = it
			jsonMinified++
			def oldLength = file.length()
			file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			jsonBytesSaved += oldLength - file.length()
		}

		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}

jar {
    manifest {
        attributes([
                "Specification-Title": "mininggadgets",
                "Specification-Vendor": "direwolf20",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"direwolf20",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
